generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  phoneNumber  String         @unique
  name         String?
  timezone     String         @default("UTC")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isActive     Boolean        @default(true)
  interactions Interaction[]
  mediaFiles   MediaFile[]
  memories     Memory[]
  reminders    Reminder[]
  sharedTo     SharedMemory[] @relation("SharedTo")
  sharedFrom   SharedMemory[] @relation("SharedFrom")

  @@index([phoneNumber])
  @@index([createdAt])
  @@map("users")
}

model Interaction {
  id          String            @id @default(cuid())
  userId      String
  messageSid  String?           @unique
  messageType MessageType
  content     String?
  timestamp   DateTime          @default(now())
  direction   Direction
  status      InteractionStatus @default(PENDING)
  metadata    Json?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaFiles  MediaFile[]
  memories    Memory[]

  @@index([userId])
  @@index([timestamp])
  @@index([messageType])
  @@index([direction])
  @@index([status])
  @@map("interactions")
}

model Memory {
  id             String         @id @default(cuid())
  userId         String
  interactionId  String?
  content        String
  mem0Id         String?
  memoryType     MemoryType
  tags           Json
  importance     Int            @default(1)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastAccessed   DateTime       @default(now())
  accessCount    Int            @default(0)
  mediaFiles     MediaFile[]
  interaction    Interaction?   @relation(fields: [interactionId], references: [id])
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders      Reminder[]
  sharedMemories SharedMemory[]

  @@index([userId])
  @@index([mem0Id])
  @@index([memoryType])
  @@index([tags])
  @@index([importance])
  @@index([createdAt])
  @@index([lastAccessed])
  @@map("memories")
}

model MediaFile {
  id            String       @id @default(cuid())
  userId        String
  interactionId String?
  memoryId      String?
  fileName      String
  originalName  String
  fileType      String
  fileSize      Int
  s3Key         String
  s3Url         String
  fingerprint   String       @unique
  transcription String?
  metadata      Json?
  createdAt     DateTime     @default(now())
  memory        Memory?      @relation(fields: [memoryId], references: [id])
  interaction   Interaction? @relation(fields: [interactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fileType])
  @@index([createdAt])
  @@index([s3Key])
  @@map("media_files")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventData Json?
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
  @@map("analytics")
}

model Reminder {
  id           String         @id @default(cuid())
  userId       String
  memoryId     String
  scheduledFor DateTime
  message      String
  status       ReminderStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  memory       Memory         @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scheduledFor])
  @@map("reminders")
}

model SharedMemory {
  id          String             @id @default(cuid())
  memoryId    String
  fromUserId  String
  toUserId    String
  message     String?
  status      SharedMemoryStatus @default(PENDING)
  respondedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  toUser      User               @relation("SharedTo", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser    User               @relation("SharedFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  memory      Memory             @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@index([memoryId])
  @@index([fromUserId])
  @@index([toUserId])
  @@map("shared_memories")
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  CONTACT
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum InteractionStatus {
  PENDING
  PROCESSED
  FAILED
  IGNORED
}

enum MemoryType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  MIXED
}

enum ReminderStatus {
  PENDING
  SENT
  CANCELLED
}

enum SharedMemoryStatus {
  PENDING
  ACCEPTED
  REJECTED
}
